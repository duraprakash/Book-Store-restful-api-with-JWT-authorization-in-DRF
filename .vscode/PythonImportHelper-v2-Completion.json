[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "user.models",
        "description": "user.models",
        "isExtraImport": true,
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "slugify",
        "importPath": "django.template.defaultfilters",
        "description": "django.template.defaultfilters",
        "isExtraImport": true,
        "detail": "django.template.defaultfilters",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "DestroyAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "CreateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "UpdateAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "DestroyAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Env",
        "importPath": "environs",
        "description": "environs",
        "isExtraImport": true,
        "detail": "environs",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "TokenObtainSlidingView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshSlidingView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenBlacklistView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "book.migrations.0001_initial",
        "description": "book.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Author',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "book.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "book.migrations.0002_book_slug",
        "description": "book.migrations.0002_book_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('book', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='book',\n            name='slug',\n            field=models.SlugField(default=''),\n        ),",
        "detail": "book.migrations.0002_book_slug",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "book.migrations.0003_alter_book_author_alter_book_slug_and_more",
        "description": "book.migrations.0003_alter_book_author_alter_book_slug_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('book', '0002_book_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='book',\n            name='author',\n            field=models.ManyToManyField(to='book.author', verbose_name='Authors'),\n        ),",
        "detail": "book.migrations.0003_alter_book_author_alter_book_slug_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "book.migrations.0004_rename_author_book_authors",
        "description": "book.migrations.0004_rename_author_book_authors",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('book', '0003_alter_book_author_alter_book_slug_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='book',\n            old_name='author',\n            new_name='authors',\n        ),",
        "detail": "book.migrations.0004_rename_author_book_authors",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "book.migrations.0005_book_stock_quantity",
        "description": "book.migrations.0005_book_stock_quantity",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('book', '0004_rename_author_book_authors'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='book',\n            name='stock_quantity',\n            field=models.PositiveIntegerField(default=0),\n        ),",
        "detail": "book.migrations.0005_book_stock_quantity",
        "documentation": {}
    },
    {
        "label": "slug",
        "kind": 6,
        "importPath": "book.admin",
        "description": "book.admin",
        "peekOfCode": "class slug(admin.ModelAdmin):\n    list_display = (\"title\", \"added_by\",)\n    prepopulated_fields = {\"slug\": (\"title\", \"added_by\")}\nadmin.site.register(Book, slug)",
        "detail": "book.admin",
        "documentation": {}
    },
    {
        "label": "BookConfig",
        "kind": 6,
        "importPath": "book.apps",
        "description": "book.apps",
        "peekOfCode": "class BookConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'book'",
        "detail": "book.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "book.models",
        "description": "book.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\nclass SubCategory(models.Model):\n    category = models.ForeignKey(Category, verbose_name=(\"Category\"), on_delete=models.CASCADE)\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\nclass Author(models.Model):",
        "detail": "book.models",
        "documentation": {}
    },
    {
        "label": "SubCategory",
        "kind": 6,
        "importPath": "book.models",
        "description": "book.models",
        "peekOfCode": "class SubCategory(models.Model):\n    category = models.ForeignKey(Category, verbose_name=(\"Category\"), on_delete=models.CASCADE)\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\nclass Author(models.Model):\n    GENDER_CHOICES = [\n        ('male','Male'),\n        ('female','Female'),\n        ('other','Other'),",
        "detail": "book.models",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "book.models",
        "description": "book.models",
        "peekOfCode": "class Author(models.Model):\n    GENDER_CHOICES = [\n        ('male','Male'),\n        ('female','Female'),\n        ('other','Other'),\n    ]\n    name = models.CharField(max_length=50)\n    dob = models.DateField(null=True,blank=True)\n    nationality = models.CharField(max_length=50)\n    gender = models.CharField(max_length=10, choices=GENDER_CHOICES)",
        "detail": "book.models",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "book.models",
        "description": "book.models",
        "peekOfCode": "class Book(models.Model):\n    title = models.CharField(max_length=50, blank=False)\n    image = models.ImageField(upload_to='media')\n    isnb = models.CharField(max_length=50)\n    category = models.ForeignKey(Category, verbose_name=(\"Category\"), on_delete=models.CASCADE)\n    sub_category = models.ForeignKey(SubCategory, verbose_name=(\"Sub Category\"), on_delete=models.CASCADE)\n    authors = models.ManyToManyField(Author, verbose_name=(\"Authors\"))\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    stock_quantity = models.PositiveIntegerField(default=0)\n    publication = models.CharField(max_length=50)",
        "detail": "book.models",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "book.serializers",
        "description": "book.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\nclass SubCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SubCategory\n        fields = '__all__'\nclass AuthorSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "book.serializers",
        "documentation": {}
    },
    {
        "label": "SubCategorySerializer",
        "kind": 6,
        "importPath": "book.serializers",
        "description": "book.serializers",
        "peekOfCode": "class SubCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SubCategory\n        fields = '__all__'\nclass AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = '__all__'\nclass BookSerializer(serializers.ModelSerializer):\n    # # uncomment this to show details instead of id",
        "detail": "book.serializers",
        "documentation": {}
    },
    {
        "label": "AuthorSerializer",
        "kind": 6,
        "importPath": "book.serializers",
        "description": "book.serializers",
        "peekOfCode": "class AuthorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Author\n        fields = '__all__'\nclass BookSerializer(serializers.ModelSerializer):\n    # # uncomment this to show details instead of id\n    # authors = AuthorSerializer(many=True)\n    # category = CategorySerializer()\n    # sub_category = SubCategorySerializer()\n    class Meta:",
        "detail": "book.serializers",
        "documentation": {}
    },
    {
        "label": "BookSerializer",
        "kind": 6,
        "importPath": "book.serializers",
        "description": "book.serializers",
        "peekOfCode": "class BookSerializer(serializers.ModelSerializer):\n    # # uncomment this to show details instead of id\n    # authors = AuthorSerializer(many=True)\n    # category = CategorySerializer()\n    # sub_category = SubCategorySerializer()\n    class Meta:\n        model = Book\n        fields = '__all__'\n        # lookup_field = ['slug','pk']\n        # extra_kwargs = {",
        "detail": "book.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "book.urls",
        "description": "book.urls",
        "peekOfCode": "urlpatterns = [\n    # path('', ),\n    # Category\n    path('categories/', CategoryListView.as_view(), name='categories'),\n    path('category/create/', CategoryCreateView.as_view(), name='category_create'),\n    path('category/<int:pk>/', CategoryRetrieveView.as_view(), name='category_retrieve'),\n    path('category/<int:pk>/update/', CategoryUpdateView.as_view(), name='category_update'),\n    path('category/<int:pk>/delete/', CategoryDeleteView.as_view(), name='category_delete'),\n    # Sub-Category\n    path('subcategories/', SubCategoryListView.as_view(), name='subcategories'),",
        "detail": "book.urls",
        "documentation": {}
    },
    {
        "label": "CategoryListView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class CategoryListView(ListAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass CategoryCreateView(CreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass CategoryRetrieveView(RetrieveAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "CategoryCreateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class CategoryCreateView(CreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass CategoryRetrieveView(RetrieveAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\nclass CategoryUpdateView(UpdateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "CategoryRetrieveView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class CategoryRetrieveView(RetrieveAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\nclass CategoryUpdateView(UpdateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\nclass CategoryDeleteView(DestroyAPIView):\n    queryset = Category.objects.all()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "CategoryUpdateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class CategoryUpdateView(UpdateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\nclass CategoryDeleteView(DestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "CategoryDeleteView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class CategoryDeleteView(DestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    lookup_field = 'pk'\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response({\"message\": \"Category deleted successfully\"}, status=status.HTTP_204_NO_CONTENT)\n# Sub-Category\nclass SubCategoryListView(ListAPIView):",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryListView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class SubCategoryListView(ListAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\nclass SubCategoryCreateView(CreateAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\nclass SubCategoryRetrieveView(RetrieveAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk'",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryCreateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class SubCategoryCreateView(CreateAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\nclass SubCategoryRetrieveView(RetrieveAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk'\nclass SubCategoryUpdateView(UpdateAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryRetrieveView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class SubCategoryRetrieveView(RetrieveAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk'\nclass SubCategoryUpdateView(UpdateAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk'\nclass SubCategoryDeleteView(DestroyAPIView):\n    queryset = SubCategory.objects.all()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryUpdateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class SubCategoryUpdateView(UpdateAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk'\nclass SubCategoryDeleteView(DestroyAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk' \n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "SubCategoryDeleteView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class SubCategoryDeleteView(DestroyAPIView):\n    queryset = SubCategory.objects.all()\n    serializer_class = SubCategorySerializer\n    lookup_field = 'pk' \n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response({\"message\": \"Sub category deleted successfully\"}, status=status.HTTP_204_NO_CONTENT) \n# Author\nclass AuthorListView(ListAPIView):",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "AuthorListView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class AuthorListView(ListAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\nclass AuthorCreateView(CreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\nclass AuthorRetrieveView(RetrieveAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'pk'",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "AuthorCreateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class AuthorCreateView(CreateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\nclass AuthorRetrieveView(RetrieveAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'pk'\nclass AuthorUpdateView(UpdateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "AuthorRetrieveView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class AuthorRetrieveView(RetrieveAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'pk'\nclass AuthorUpdateView(UpdateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'pk'\nclass AuthorDeleteView(DestroyAPIView):\n    queryset = Author.objects.all()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "AuthorUpdateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class AuthorUpdateView(UpdateAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer\n    lookup_field = 'pk'\nclass AuthorDeleteView(DestroyAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer   \n    lookup_field = 'pk'\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "AuthorDeleteView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class AuthorDeleteView(DestroyAPIView):\n    queryset = Author.objects.all()\n    serializer_class = AuthorSerializer   \n    lookup_field = 'pk'\n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response({\"message\": \"Author deleted successfully\"}, status=status.HTTP_204_NO_CONTENT) \n# Book\nclass BookListView(ListAPIView):",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "BookListView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class BookListView(ListAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    # # query params 1.1\n    # # change in BookSerializer -> lookup_field, extra_kwargs\n    # def get_queryset(self):\n    #     queryset = super().get_queryset()\n    #     slug = self.request.query_params.get('slug', None)\n    #     if slug is not None:\n    #         queryset = queryset.filter(Q(slug__icontains=slug)) # SELECT * FROM book WHERE slug LIKE '%ref%';",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "BookCreateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class BookCreateView(CreateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\nclass BookRetrieveView(RetrieveAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    lookup_field = 'pk'\n    # # query params\n    # def get_object(self):\n    #     queryset = self.get_queryset()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "BookRetrieveView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class BookRetrieveView(RetrieveAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    lookup_field = 'pk'\n    # # query params\n    # def get_object(self):\n    #     queryset = self.get_queryset()\n    #     # Try to retrieve by slug first\n    #     slug = self.kwargs.get('slug')\n    #     if slug is not None:",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "BookUpdateView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class BookUpdateView(UpdateAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer\n    lookup_field = 'pk'\nclass BookDeleteView(DestroyAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer  \n    lookup_field = 'pk'  \n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "BookDeleteView",
        "kind": 6,
        "importPath": "book.views",
        "description": "book.views",
        "peekOfCode": "class BookDeleteView(DestroyAPIView):\n    queryset = Book.objects.all()\n    serializer_class = BookSerializer  \n    lookup_field = 'pk'  \n    def destroy(self, request, *args, **kwargs):\n        instance = self.get_object()\n        self.perform_destroy(instance)\n        return Response({\"message\": \"Book deleted successfully\"}, status=status.HTTP_204_NO_CONTENT)",
        "detail": "book.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.asgi",
        "description": "config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# env 1.2\nenv = Env()\nenv.read_env(os.path.join(BASE_DIR,'.env'))\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECRET_KEY = 'django-insecure-_r&ii526mx%=hd(55jcgc#$k!1vu&$#8fpmc*_=d6hl7#v$81n'\n# env 1.3\nSECRET_KEY = env(\"SECRETE\")",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "env",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "env = Env()\nenv.read_env(os.path.join(BASE_DIR,'.env'))\n# SECURITY WARNING: keep the secret key used in production secret!\n# SECRET_KEY = 'django-insecure-_r&ii526mx%=hd(55jcgc#$k!1vu&$#8fpmc*_=d6hl7#v$81n'\n# env 1.3\nSECRET_KEY = env(\"SECRETE\")\nKHALTI_SECRETE_KEY = env(\"KHALTI_SECRETE_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SECRET_KEY = env(\"SECRETE\")\nKHALTI_SECRETE_KEY = env(\"KHALTI_SECRETE_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "KHALTI_SECRETE_KEY",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "KHALTI_SECRETE_KEY = env(\"KHALTI_SECRETE_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework', # auth 1.4",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework', # auth 1.4\n    'rest_framework.authtoken', # auth 1.3\n    'rest_framework_simplejwt', # jwt 1.4",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'config.urls'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "ROOT_URLCONF = 'config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom datetime import timedelta # jwt 1.1",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom datetime import timedelta # jwt 1.1\nfrom django.conf import settings",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom datetime import timedelta # jwt 1.1\nfrom django.conf import settings\n# jwt 1.2",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom datetime import timedelta # jwt 1.1\nfrom django.conf import settings\n# jwt 1.2\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nfrom datetime import timedelta # jwt 1.1\nfrom django.conf import settings\n# jwt 1.2\nSIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=1),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": False,\n    \"ALGORITHM\": \"HS256\",\n    \"SIGNING_KEY\": settings.SECRET_KEY,\n    \"VERIFYING_KEY\": \"\",\n    \"AUDIENCE\": None,",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    )\n}\n# auth 1.1\nAUTH_USER_MODEL = 'user.User'\n# pillow 1.1\nMEDIA_URL = '/media/'\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'user.User'\n# pillow 1.1\nMEDIA_URL = '/media/'\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT =  os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "config.settings",
        "description": "config.settings",
        "peekOfCode": "MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')",
        "detail": "config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "config.urls",
        "description": "config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('users/', include('user.urls')),\n    path('books/', include('book.urls')),\n]\n# image access 1.2\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "config.wsgi",
        "description": "config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "config.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0001_initial",
        "description": "user.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "user.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0002_user_buyer_user_seller",
        "description": "user.migrations.0002_user_buyer_user_seller",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='buyer',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "user.migrations.0002_user_buyer_user_seller",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "user.migrations.0003_remove_user_buyer",
        "description": "user.migrations.0003_remove_user_buyer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('user', '0002_user_buyer_user_seller'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='buyer',\n        ),\n    ]",
        "detail": "user.migrations.0003_remove_user_buyer",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "user.apps",
        "description": "user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'",
        "detail": "user.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "user.models",
        "description": "user.models",
        "peekOfCode": "class User(AbstractUser):\n    # first_name = models.CharField(max_length=50)\n    updated_at = models.DateTimeField(auto_now_add=True)\n    seller = models.BooleanField(default=False)\n    # buyer = models.BooleanField(default=False) # only one needed\n    def __str__(self):\n        return self.username",
        "detail": "user.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "user.serializers",
        "description": "user.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        # fields = '__all__'\n        fields = ['username', 'password', 'email', 'seller']\n    def create(self, validated_data):\n        # password = validated_data.pop('password')\n        seller = validated_data.get('seller')\n        user = User.objects.create_user(**validated_data)\n        try:",
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "UserListSerializer",
        "kind": 6,
        "importPath": "user.serializers",
        "description": "user.serializers",
        "peekOfCode": "class UserListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'username', 'email', 'seller']\nclass LoginSerializer(serializers.Serializer):\n    username = serializers.CharField()\n    password = serializers.CharField()\n    def validate(self, attrs):\n        username = attrs.get('username')\n        password = attrs.get('password')",
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "LoginSerializer",
        "kind": 6,
        "importPath": "user.serializers",
        "description": "user.serializers",
        "peekOfCode": "class LoginSerializer(serializers.Serializer):\n    username = serializers.CharField()\n    password = serializers.CharField()\n    def validate(self, attrs):\n        username = attrs.get('username')\n        password = attrs.get('password')\n        if username and password:\n            user = authenticate(request=self.context.get('request'), username=username, password=password)\n            if not user:\n                msg = 'Unable to log in with provided credentials.'",
        "detail": "user.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "user.urls",
        "description": "user.urls",
        "peekOfCode": "urlpatterns = [\n    path('', UserListView.as_view(), name='users'),\n    path('create/', UserCreateView.as_view(), name='user-create'),\n    path('<int:pk>/', UserRetrieveView.as_view(), name='user-retrieve'),\n    path('<int:pk>/update/', UserUpdateView.as_view(), name='user-update'),\n    path('<int:pk>/delete/', UserDeleteView.as_view(), name='user-delete'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('api/token/', TokenObtainSlidingView.as_view(), name='token_obtain'),\n    path('api/token/refresh/', TokenRefreshSlidingView.as_view(), name='token_refresh'),",
        "detail": "user.urls",
        "documentation": {}
    },
    {
        "label": "UserCreateView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class UserCreateView(CreateAPIView):\n    serializer_class = UserSerializer\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.save()\n        token = get_tokens_for_user(user)\n        return Response({'token':token, 'msg':'SignUp Successful'}, status=status.HTTP_201_CREATED)\nclass Seller(ListAPIView):\n    serializer_class = UserListSerializer",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "Seller",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class Seller(ListAPIView):\n    serializer_class = UserListSerializer\n    def get_queryset(self):\n        return User.objects.filter(seller=True)\nclass UserListView(ListAPIView):\n    permission_classes = (IsAuthenticated,)\n    authentication_classes = (JWTAuthentication,)\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\nclass UserRetrieveView(RetrieveAPIView):",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "UserListView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class UserListView(ListAPIView):\n    permission_classes = (IsAuthenticated,)\n    authentication_classes = (JWTAuthentication,)\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\nclass UserRetrieveView(RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\nclass UserUpdateView(UpdateAPIView):\n    queryset = User.objects.all()",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "UserRetrieveView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class UserRetrieveView(RetrieveAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\nclass UserUpdateView(UpdateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\n    def update(self, request, *args, **kwargs):\n        instance = self.get_object()\n        # Serialize the old object before updating\n        old_data = UserListSerializer(instance).data",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "UserUpdateView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class UserUpdateView(UpdateAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\n    def update(self, request, *args, **kwargs):\n        instance = self.get_object()\n        # Serialize the old object before updating\n        old_data = UserListSerializer(instance).data\n        serializer = self.get_serializer(instance, data=request.data, partial=True)\n        serializer.is_valid(raise_exception=True)\n        self.perform_update(serializer)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "UserDeleteView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class UserDeleteView(DestroyAPIView):\n    queryset = User.objects.all()\n    serializer_class = UserListSerializer\nclass LogoutView(APIView):\n    permission_classes = (IsAuthenticated,)\n    authentication_classes = (JWTAuthentication,)\n    def post(self, request):\n        refresh_token = request.data.get('refresh_token')\n        if not refresh_token:\n            return Response({'error': 'Refresh token is required.'}, status=status.HTTP_400_BAD_REQUEST)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class LogoutView(APIView):\n    permission_classes = (IsAuthenticated,)\n    authentication_classes = (JWTAuthentication,)\n    def post(self, request):\n        refresh_token = request.data.get('refresh_token')\n        if not refresh_token:\n            return Response({'error': 'Refresh token is required.'}, status=status.HTTP_400_BAD_REQUEST)\n        try:\n            token = RefreshToken(refresh_token)\n            token.blacklist()",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "class LoginView(TokenObtainPairView):\n    serializers_class = LoginSerializer\n    def post(self, request):\n        serializer = LoginSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        user = serializer.validated_data['user']\n        refresh = RefreshToken.for_user(user)\n        return Response({\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "get_tokens_for_user",
        "kind": 2,
        "importPath": "user.views",
        "description": "user.views",
        "peekOfCode": "def get_tokens_for_user(user):\n    refresh = RefreshToken.for_user(user)\n    return {\n        'refresh': str(refresh),\n        'access': str(refresh.access_token),\n    }\nclass UserCreateView(CreateAPIView):\n    serializer_class = UserSerializer\n    def post(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)",
        "detail": "user.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]